{"version":3,"sources":["recoil/atoms.tsx","recoil/selectors.tsx","components/passwortTool/changePasswort.tsx","classes/fetchWithToken.tsx","App.tsx","index.tsx"],"names":["clickedSubmitState","atom","key","default","usernameState","newPasswdState","newPasswdConfirmState","oldPasswdState","usernameRequiredState","selector","get","oldPasswordRequiredState","newPasswordRequiredState","newPasswordConfirmRequiredState","newEqualToOldState","confirmIdenticalState","containsSpacesState","trim","noNumbersOrLettersState","test","lessThanFourCharsState","length","ChangePasswort","t","useTranslation","useRecoilState","clickedSubmit","setClickedSubmit","username","setUsername","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","oldPassword","setOldPassword","noNumberOrLetter","useRecoilValue","containsSpaces","lessThanFourChars","newEqualToOld","confirmIdentical","usernameRequired","oldPasswordRequired","newPasswordRequired","newPasswordConfirmRequired","CssBaseline","Grid","component","container","direction","justifyContent","alignItems","Card","elevation","sx","maxWidth","Box","mt","mb","mr","ml","flexDirection","marginTop","display","Avatar","m","bgcolor","Typography","variant","align","noValidate","onSubmit","event","input","preventDefault","newPasswordConfirm","fetch","method","headers","globalThis","horde","sessionToken","body","JSON","stringify","then","response","ok","json","Error","status","res","console","log","catch","err","onChange","Tooltip","arrow","placement","title","TextField","margin","size","required","fullWidth","e","target","value","label","error","Boolean","type","id","autoComplete","helperText","Button","onClick","InnerApp","toasty","useToasty","i18n","menuEntries","logoutAction","success","applicationTitle","Link","href","color","underline","notificationHistory","pastNotifications","noNotificationsYet","createdAtFormat","v","Date","toString","languageMenu","entries","onLanguageChange","msg","changeLanguage","currentLanguage","language","Toolbar","App","position","gutter","window","onload","appMode","currentApp","userUid","appWebroot","languageKey","use","HttpApi","initReactI18next","init","debug","lng","replace","interpolation","escapeValue","backend","loadPath","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.c0d6b395.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const clickedSubmitState = atom({\n  key: \"clickedSubmit\",\n  default: false,\n});\n\nexport const usernameState = atom({\n  key: \"username\",\n  default: \"\",\n});\n\nexport const newPasswdState = atom({\n  key: \"newPasswd\",\n  default: \"\",\n});\n\nexport const newPasswdConfirmState = atom({\n  key: \"newPasswdConfirm\",\n  default: \"\",\n});\n\nexport const oldPasswdState = atom({\n  key: \"oldPasswd\",\n  default: \"\",\n});\n","import { selector } from \"recoil\";\n\nimport {\n  clickedSubmitState,\n  newPasswdConfirmState,\n  newPasswdState,\n  oldPasswdState,\n  usernameState,\n} from \"./atoms\";\n\nexport const usernameRequiredState = selector({\n  key: \"usernameRequired\",\n  get: ({ get }) =>\n    get(clickedSubmitState) && get(usernameState) === \"\" ? \"Is required.\" : \"\",\n});\n\nexport const oldPasswordRequiredState = selector({\n  key: \"oldPasswordRequired\",\n  get: ({ get }) =>\n    get(clickedSubmitState) && get(oldPasswdState) === \"\" ? \"Is required.\" : \"\",\n});\n\nexport const newPasswordRequiredState = selector({\n  key: \"newPasswordRequired\",\n  get: ({ get }) =>\n    get(clickedSubmitState) && get(newPasswdState) === \"\" ? \"Is required.\" : \"\",\n});\n\nexport const newPasswordConfirmRequiredState = selector({\n  key: \"newPasswordConfirmRequired\",\n  get: ({ get }) =>\n    get(clickedSubmitState) && get(newPasswdConfirmState) === \"\"\n      ? \"Is required.\"\n      : \"\",\n});\n\nexport const newEqualToOldState = selector({\n  key: \"newEqualToOld\",\n  get: ({ get }) =>\n    get(newPasswdState) &&\n    get(oldPasswdState) &&\n    get(newPasswdState) === get(oldPasswdState)\n      ? \"Old and new password must be different.\"\n      : \"\",\n});\n\nexport const confirmIdenticalState = selector({\n  key: \"confirmIdentical\",\n  get: ({ get }) =>\n    get(newPasswdState) &&\n    get(newPasswdConfirmState) &&\n    get(newPasswdState) !== get(newPasswdConfirmState)\n      ? \"Passwords do not match.\"\n      : \"\",\n});\n\nexport const containsSpacesState = selector({\n  key: \"containsSpaces\",\n  get: ({ get }) =>\n    get(newPasswdState).trim() !== get(newPasswdState)\n      ? \"Password cannot have leading or trailing spaces.\"\n      : \"\",\n});\n\nexport const noNumbersOrLettersState = selector({\n  key: \"noNumberOrLetters\",\n  get: ({ get }) =>\n    get(newPasswdState) &&\n    !/.*?(?:[a-z].*?[0-9]|[0-9].*?[a-z]).*?/.test(get(newPasswdState))\n      ? \"Password must contain at least one letter and one number.\"\n      : \"\",\n});\n\nexport const lessThanFourCharsState = selector({\n  key: \"lessThanFourChars\",\n  get: ({ get }) =>\n    get(newPasswdState) && get(newPasswdState).trim().length < 8\n      ? \"Password needs to be at least 8 characters long.\"\n      : \"\",\n});\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CssBaseline,\n  Grid,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\n\nimport { changePassword, verifypassword } from \"../../classes/fetchWithToken\";\nimport {\n  clickedSubmitState,\n  newPasswdConfirmState,\n  newPasswdState,\n  oldPasswdState,\n  usernameState,\n} from \"../../recoil/atoms\";\nimport {\n  confirmIdenticalState,\n  containsSpacesState,\n  lessThanFourCharsState,\n  newEqualToOldState,\n  newPasswordConfirmRequiredState,\n  newPasswordRequiredState,\n  noNumbersOrLettersState,\n  oldPasswordRequiredState,\n  usernameRequiredState,\n} from \"../../recoil/selectors\";\n\n//! Aufgabe anfrage auf BE um validierung anzeigen alle z.B. \"debounce\" sekunden ob pw lang genug\n\nexport default function ChangePasswort() {\n  const { t } = useTranslation();\n\n  //atoms for inputFields value and check Submited\n  const [clickedSubmit, setClickedSubmit] = useRecoilState(clickedSubmitState);\n  const [username, setUsername] = useRecoilState(usernameState);\n  const [newPassword, setNewPassword] = useRecoilState(newPasswdState);\n  const [confirmNewPassword, setConfirmNewPassword] = useRecoilState(\n    newPasswdConfirmState\n  );\n  const [oldPassword, setOldPassword] = useRecoilState(oldPasswdState);\n\n  //selctors for inputFields error\n  const noNumberOrLetter = useRecoilValue(noNumbersOrLettersState);\n  const containsSpaces = useRecoilValue(containsSpacesState);\n  const lessThanFourChars = useRecoilValue(lessThanFourCharsState);\n  const newEqualToOld = useRecoilValue(newEqualToOldState);\n  const confirmIdentical = useRecoilValue(confirmIdenticalState);\n  const usernameRequired = useRecoilValue(usernameRequiredState);\n  const oldPasswordRequired = useRecoilValue(oldPasswordRequiredState);\n  const newPasswordRequired = useRecoilValue(newPasswordRequiredState);\n  const newPasswordConfirmRequired = useRecoilValue(\n    newPasswordConfirmRequiredState\n  );\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setClickedSubmit(true);\n    if (\n      noNumberOrLetter === \"\" &&\n      containsSpaces === \"\" &&\n      lessThanFourChars === \"\" &&\n      newEqualToOld === \"\" &&\n      confirmIdentical === \"\" &&\n      usernameRequired === \"\" &&\n      oldPasswordRequired === \"\" &&\n      newPasswordRequired === \"\" &&\n      newPasswordConfirmRequired === \"\"\n    ) {\n      changePassword({\n        username: username,\n        oldPassword: oldPassword,\n        newPassword: newPassword,\n        newPasswordConfirm: confirmNewPassword,\n      });\n    }\n  };\n\n  const resetHandler = () => {\n    if (clickedSubmit) {\n      setClickedSubmit(false);\n    }\n    setUsername(\"\");\n    setOldPassword(\"\");\n    setNewPassword(\"\");\n    setConfirmNewPassword(\"\");\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <Grid\n        component=\"main\"\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Card elevation={6} sx={{ maxWidth: 300 }}>\n          <Box\n            sx={{\n              mt: 1,\n              mb: 1,\n              mr: 1,\n              ml: 1,\n              flexDirection: \"column\",\n              alignItems: \"flex-start\",\n            }}\n          >\n            <Box\n              sx={{\n                marginTop: 1,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n              }}\n            >\n              <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n                <LockOutlinedIcon />\n              </Avatar>\n              <Typography variant=\"h6\" component=\"div\" align=\"center\">\n                {t(\"Change password\")}\n              </Typography>\n            </Box>\n            <Box\n              component=\"form\"\n              noValidate\n              onSubmit={handleSubmit}\n              onChange={() => setClickedSubmit(false)}\n              sx={{ mt: 2 }}\n            >\n              <Tooltip\n                arrow\n                placement=\"right\"\n                title={\n                  t(\n                    \"Username of the user whose password you want to change.\"\n                  ) as string\n                } //https://github.com/mui-org/material-ui/issues/20701\n              >\n                <TextField\n                  margin=\"dense\"\n                  size=\"small\"\n                  required\n                  fullWidth\n                  onChange={(e) => setUsername(e.target.value)}\n                  value={username}\n                  label={t(\"Username\")}\n                  error={Boolean(usernameRequired)}\n                  type=\"username\"\n                  id=\"username\"\n                  autoComplete=\"username\"\n                  helperText={t(usernameRequired)}\n                />\n              </Tooltip>\n              <Tooltip\n                arrow\n                placement=\"right\"\n                title={\n                  t(\n                    \"Old password of the user whose password you want to change.\"\n                  ) as string\n                }\n              >\n                <TextField\n                  margin=\"dense\"\n                  size=\"small\"\n                  required\n                  fullWidth\n                  onChange={(e) => setOldPassword(e.target.value)}\n                  value={oldPassword}\n                  label={t(\"Old password\")}\n                  error={Boolean(oldPasswordRequired)}\n                  type=\"password\"\n                  id=\"oldPassword\"\n                  autoComplete=\"current-password\"\n                  helperText={t(oldPasswordRequired)}\n                />\n              </Tooltip>\n              <Tooltip\n                arrow\n                placement=\"right\"\n                title={\n                  t(\n                    \"New password of the user whose password you want to change.\"\n                  ) as string\n                }\n              >\n                <TextField\n                  margin=\"dense\"\n                  size=\"small\"\n                  required\n                  fullWidth\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  value={newPassword}\n                  label={t(\"New password\")}\n                  error={Boolean(\n                    newPasswordRequired ||\n                      containsSpaces ||\n                      lessThanFourChars ||\n                      noNumberOrLetter ||\n                      newEqualToOld\n                  )}\n                  type=\"password\"\n                  id=\"newPassword\"\n                  autoComplete=\"new-password\"\n                  helperText={t(\n                    newPasswordRequired ||\n                      containsSpaces ||\n                      lessThanFourChars ||\n                      noNumberOrLetter ||\n                      newEqualToOld\n                  )}\n                />\n              </Tooltip>\n              <Tooltip\n                arrow\n                placement=\"right\"\n                title={t(\"Confirm the new password.\") as string}\n              >\n                <TextField\n                  margin=\"dense\"\n                  size=\"small\"\n                  required\n                  fullWidth\n                  onChange={(e) => setConfirmNewPassword(e.target.value)}\n                  value={confirmNewPassword}\n                  label={t(\"Confirm new password\")}\n                  error={Boolean(\n                    newPasswordConfirmRequired || confirmIdentical\n                  )}\n                  type=\"password\"\n                  id=\"confirmPassword\"\n                  autoComplete=\"new-password\"\n                  helperText={t(newPasswordConfirmRequired || confirmIdentical)}\n                />\n              </Tooltip>\n              <Box\n                sx={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <Button\n                  size=\"small\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                  sx={{ mt: 1 }}\n                >\n                  {t(\"confirm\")}\n                </Button>\n                <Button\n                  size=\"small\"\n                  onClick={resetHandler}\n                  variant=\"outlined\"\n                  sx={{ ml: 1, mt: 1 }}\n                >\n                  {t(\"reset\")}\n                </Button>\n              </Box>\n            </Box>\n          </Box>\n        </Card>\n      </Grid>\n    </>\n  );\n}\n","export function changePassword(input: {\n  username: string;\n  oldPassword: string;\n  newPassword: string;\n  newPasswordConfirm: string;\n}) {\n  // \"/api/changepw\"\n  fetch(\n    `api/changepw`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Horde-Session-Token\": globalThis.horde.sessionToken,\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      body: JSON.stringify(input),\n    }\n  )\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(`Response code: ${response.status}`);\n      }\n    })\n    .then((res) => console.log(res))\n    .catch((err) => {\n      console.log(err);\n      //throw new Error(err);\n    });\n}\n  // .then(response => response.json())\n\nexport function verifypassword(input: { username: string; password: string }) {\n  // \"/api/changepw\"\n  fetch(\n    `${process.env.REACT_APP_BACKEND_URI}/${process.env.PUBLIC_URL}/api/veryfi`,\n    {\n      method: \"post\",\n      headers: {\n        \"Horde-Session-Token\": globalThis.horde.sessionToken,\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(input),\n    }\n  )\n    .then((res) => res.json())\n    .then((res) =>\n      console.log(\"Success\", res.success, \"Error message\", res.msg)\n    );\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RecoilRoot } from \"recoil\";\n\nimport { Toastyfier, TopBar, useToasty } from \"@b1-systems/react-components\";\nimport { Link, Toolbar } from \"@mui/material\";\n\nimport ChangePasswort from \"./components/passwortTool/changePasswort\";\n\nfunction InnerApp() {\n  const { toasty } = useToasty();\n  const { t, i18n } = useTranslation();\n\n  return (\n    <>\n      <TopBar\n        menuEntries={[]}\n        logoutAction={() => toasty.success(\"Logout complete!\")}\n        applicationTitle={\n          <Link href=\"\" color=\"inherit\" underline=\"hover\">\n            {t(\"Change password\")}\n          </Link>\n        }\n        notificationHistory={{\n          pastNotifications: \"Past Notifications\",\n          noNotificationsYet: \"No notifications yet\",\n          createdAtFormat: (v: number) => new Date(v).toString(),\n        }}\n        languageMenu={{\n          entries: [\n            { key: \"de-DE\", display: \"Deutsch\" },\n            { key: \"en-US\", display: \"English\" },\n          ],\n          onLanguageChange: (key: string) => {\n            const msg =\n              key === \"en\"\n                ? \"Switched to English\"\n                : \"Sprache auf Deutsch gestellt\";\n            toasty.success(msg);\n            i18n.changeLanguage(key);\n          },\n          currentLanguage: i18n.language,\n        }}\n      />\n      <Toolbar />\n      <ChangePasswort></ChangePasswort>\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <RecoilRoot>\n      <Toastyfier position={\"bottom-right\"} gutter={8}>\n        <InnerApp />\n      </Toastyfier>\n    </RecoilRoot>\n  );\n}\n","import i18n from \"i18next\";\nimport HttpApi from \"i18next-http-backend\";\nimport React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport App from \"./App\";\n\n/**\n * These variables must be set before react is loaded.\n * They should be consumed for init and never read or written afterwards\n */\n\nwindow.onload = () => {\n  if (!globalThis.horde) {\n    globalThis.horde = window.horde || {\n      appMode: \"mock\",\n      sessionToken: \"1ccAAAAAAcA1cAA-AcAcyA1\",\n      currentApp: \"passwd\",\n      userUid: \"mockuser1\",\n      appWebroot: \"/passwd\",\n      languageKey: \"de_DE\",\n    };\n  }\n  i18n\n    .use(HttpApi)\n    .use(initReactI18next)\n    .init({\n      debug: true,\n      lng: globalThis.horde[\"languageKey\"].replace(\"_\", \"-\"),\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      backend: {\n        loadPath: `/locale/{{lng}}/{{ns}}.json`,\n      },\n    });\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Suspense fallback={<div>Loading...</div>}>\n        <App />\n      </Suspense>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n"],"sourceRoot":""}